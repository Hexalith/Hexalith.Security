@page "/Security/User/{UserId}"
@rendermode InteractiveServer
@inject IUserService UserService
@inject IRoleService RoleService
@inject NavigationManager NavigationManager
@using Hexalith.Security.Application.Users
@using Hexalith.Security.UI.Components.UserRoles
@using Hexalith.Security.Application
@using Labels = Hexalith.Security.UI.Pages.Resources.Users.UserDetails
@inject IStringLocalizer<Labels> L


<FluentStack Orientation="Orientation.Vertical">
	<FluentLabel Typo="Typography.PageTitle">@Labels.DetailsTitle</FluentLabel>

	@if (_user is null)
	{
		<FluentProgressRing />
	}
	else
	{
		<FluentGrid Style="width:100%">
			<FluentGridItem md="4">
				<FluentLabel>@L[nameof(Labels.Id)]</FluentLabel>
				<FluentTextField @bind-Value="@_user.Id" Disabled="true" />
			</FluentGridItem>

			<FluentGridItem md="4">
				<FluentLabel>@L[nameof(Labels.UserName)]</FluentLabel>
				<FluentTextField @bind-Value="@_user.Name" Disabled="true" />
			</FluentGridItem>

			<FluentGridItem md="4">
				<FluentLabel>@L[nameof(Labels.Email)]</FluentLabel>
				<FluentTextField @bind-Value="@_user.Email" Disabled="true" />
			</FluentGridItem>
		</FluentGrid>
		<FluentLabel Typo="Typography.PaneHeader">@L[nameof(Labels.UserRoles)]</FluentLabel>
		<UserRoleSummaryGrid UserId="@UserId" />
	}
</FluentStack>

@code {
	[Parameter]
	public string UserId { get; set; } = string.Empty;

	private UserDetailsViewModel? _user;

	protected override async Task OnInitializedAsync()
	{
		if (string.IsNullOrEmpty(UserId))
		{
			NavigationManager.NavigateTo("/Security/User");
		}
		// Load user details and all available roles in parallel
		_user = await UserService.GetAsync(UserId, CancellationToken.None);
		if (_user is null)
		{
			throw new KeyNotFoundException($"User with ID '{UserId}' not found.");
		}
		await base.OnInitializedAsync();
	}
}