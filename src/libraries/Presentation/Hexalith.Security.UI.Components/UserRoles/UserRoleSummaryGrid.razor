@inject IRoleService RoleService
@inject IUserService UserService
@inject NavigationManager NavigationManager
@using Hexalith.Security.Application
@using Labels = Hexalith.Security.UI.Components.Resources.UserRoles.UserRoles
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Labels> L


@if (_roles is null)
{
	<FluentProgressRing />
}
else
{
	<FluentDataGrid TGridItem="RoleSummaryViewModel"
					Items="@_roles.AsQueryable()"
					ResizableColumns="true"
					OnRowDoubleClick="HandleRowClick">
		<PropertyColumn Property="@(p => p.Id)" Title="@L[nameof(Labels.Id)]" />
		<PropertyColumn Property="@(p => p.Name)" Title="@L[nameof(Labels.Name)]" />
		<TemplateColumn Title="@(L[nameof(Labels.Selected)])">
			<FluentCheckbox Value="@IsUserRole(context.Id)" ValueChanged="@(() => ToggleUserRole(context.Id))" />
		</TemplateColumn>
	</FluentDataGrid>
}

@code {
	[Parameter]
	public EventCallback<string> OnRoleClick { get; set; }
	[Parameter]
	[EditorRequired]
	public required string UserId { get; set; }

	private IEnumerable<string>? _userRoleNames;
	private IEnumerable<RoleSummaryViewModel>? _roles;

	protected override async Task OnInitializedAsync()
	{
		_userRoleNames = await UserService.GetUserRolesAsync(UserId, CancellationToken.None);
		_roles = await RoleService.GetAllAsync(CancellationToken.None);
		await base.OnInitializedAsync();
	}
	
	private bool IsUserRole(string roleId)
	{
		// Find the role by ID to get its name
		var role = _roles?.FirstOrDefault(r => r.Id == roleId);
		return role != null && (_userRoleNames?.Contains(role.Name) ?? false);
	}

	private async Task ToggleUserRole(string roleId)
	{
		ArgumentException.ThrowIfNullOrWhiteSpace(roleId);
		if (_userRoleNames is null)
			_userRoleNames = [];
		
		// Find the role to get its name
		var role = _roles?.FirstOrDefault(r => r.Id == roleId);
		if (role == null || string.IsNullOrWhiteSpace(role.Name))
			return;
			
		if (IsUserRole(roleId))
		{
			await UserService.RemoveRoleAsync(UserId, roleId, CancellationToken.None);
			_userRoleNames = [.. _userRoleNames.Where(p => p != role.Name)];
		}
		else
		{
			await UserService.AddRoleAsync(UserId, roleId, CancellationToken.None);
			_userRoleNames = [.. _userRoleNames.Append(role.Name)];
		}
	}

	private void HandleRowClick(FluentDataGridRow<RoleSummaryViewModel> args)
	{
		NavigationManager.NavigateTo($"/Security/Role/{args.Id}");
	}
}
